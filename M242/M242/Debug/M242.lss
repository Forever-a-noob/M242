
M242.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e2  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000533  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021d  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a2  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	uint8_t value1;
	uint8_t value2;
	uint8_t prevButton = 0x00;
	uint8_t ledState = 1;
	
	BUTTONS_DDR = 0x00;
  6c:	1a ba       	out	0x1a, r1	; 26
	LEDS_DDR	= 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	uint8_t valueFromGod = 0x3A;
	uint8_t value;
	uint8_t value1;
	uint8_t value2;
	uint8_t prevButton = 0x00;
	uint8_t ledState = 1;
  72:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t delay = 10;
	uint8_t valueFromGod = 0x3A;
	uint8_t value;
	uint8_t value1;
	uint8_t value2;
	uint8_t prevButton = 0x00;
  74:	20 e0       	ldi	r18, 0x00	; 0
	BUTTONS_DDR = 0x00;
	LEDS_DDR	= 0xFF;
	/* Replace with your application code */
	while (1)
	{
		buttons = ~BUTTONS;
  76:	99 b3       	in	r25, 0x19	; 25
  78:	90 95       	com	r25
		leds = ~LEDS;
  7a:	88 b3       	in	r24, 0x18	; 24
  7c:	80 95       	com	r24
		
		if (buttons > 0x00 && buttons != prevButton) {
  7e:	99 23       	and	r25, r25
  80:	59 f0       	breq	.+22     	; 0x98 <main+0x2c>
  82:	29 17       	cp	r18, r25
  84:	49 f0       	breq	.+18     	; 0x98 <main+0x2c>
			if (ledState == 1){
  86:	31 30       	cpi	r19, 0x01	; 1
  88:	21 f4       	brne	.+8      	; 0x92 <main+0x26>
				leds = 0x00;
				ledState = 0;
				prevButton = buttons;
  8a:	29 2f       	mov	r18, r25
		leds = ~LEDS;
		
		if (buttons > 0x00 && buttons != prevButton) {
			if (ledState == 1){
				leds = 0x00;
				ledState = 0;
  8c:	30 e0       	ldi	r19, 0x00	; 0
		buttons = ~BUTTONS;
		leds = ~LEDS;
		
		if (buttons > 0x00 && buttons != prevButton) {
			if (ledState == 1){
				leds = 0x00;
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	03 c0       	rjmp	.+6      	; 0x98 <main+0x2c>
				ledState = 0;
				prevButton = buttons;
			} else {
				leds = 0xFF;
				ledState = 1;
				prevButton = buttons;
  92:	29 2f       	mov	r18, r25
				leds = 0x00;
				ledState = 0;
				prevButton = buttons;
			} else {
				leds = 0xFF;
				ledState = 1;
  94:	31 e0       	ldi	r19, 0x01	; 1
			if (ledState == 1){
				leds = 0x00;
				ledState = 0;
				prevButton = buttons;
			} else {
				leds = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
				prevButton = buttons;
			}
		}


		LEDS = ~leds;
  98:	80 95       	com	r24
  9a:	88 bb       	out	0x18, r24	; 24

	}
  9c:	ec cf       	rjmp	.-40     	; 0x76 <main+0xa>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
