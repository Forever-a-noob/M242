
M242.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d1  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000526  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ef  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002df  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 41 00 	jmp	0x82	; 0x82 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	uint8_t valueFromGod = 0xA2;
	uint8_t value;
	uint8_t value1;
	uint8_t value2;
	
	BUTTONS_DDR = 0x00;
  6c:	1a ba       	out	0x1a, r1	; 26
	LEDS_DDR	= 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	/* Replace with your application code */
	while (1)
	{
		buttons = ~BUTTONS;
  72:	89 b3       	in	r24, 0x19	; 25
  74:	80 95       	com	r24
		leds = ~LEDS;
  76:	98 b3       	in	r25, 0x18	; 24
		
		value1 = valueFromGod & 0xF0;
		
		value2 = buttons & 0x0F;
  78:	8f 70       	andi	r24, 0x0F	; 15
		
		value = value1 | value2;
  7a:	80 6a       	ori	r24, 0xA0	; 160

		leds = value;


		LEDS = ~leds;
  7c:	80 95       	com	r24
  7e:	88 bb       	out	0x18, r24	; 24
  80:	f8 cf       	rjmp	.-16     	; 0x72 <main+0x6>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
